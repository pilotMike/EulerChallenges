using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using EulerTools.Program;

namespace DistinctPowers
{
    public class Program
    {
        //Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

        //22=4, 23=8, 24=16, 25=32
        //32=9, 33=27, 34=81, 35=243
        //42=16, 43=64, 44=256, 45=1024
        //52=25, 53=125, 54=625, 55=3125

        //If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

        //4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

        //How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
        static void Main(string[] args)
        {
            int lower = 2;
            int upper = 100;
            var benchmarker = new Benchmarker();
            int sum = 0;
            benchmarker.Benchmark(() => sum = DistinctPowers(lower, upper, lower, upper));
            Console.WriteLine(sum);
            Console.ReadLine();
        }

        public static int DistinctPowers(int lowerA, int upperA, int lowerB, int upperB)
        {
            var sums = new List<BigInteger>();
            for (int i = lowerA; i <= upperA; i++)
                for (int j = lowerB; j <= upperB; j++)
                    sums.Add(BigInteger.Pow(i,j));
            return sums.Distinct().Count();
        }
    }
}
